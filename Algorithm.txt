% 多目标线性规划法
%f为目标函数系数，A、b为不等式约束的系数，Aeq，beq为等式约束系数，lb、ub为x下限和上限，fval求解x所对应的值
[x,fval]=linprog(f,A,b,Aeq,beq,lb,ub) 

% 二维K-Mean算法
function [ resX,resY,record] = FunK_mean( x,y,k )
% 功能：
%     实现k-mean聚类算法
% 输入：
%     二维数据，分别用x,y两个一维向量代表两个维度
%     k 是分成的类别的数量
% 输出：
%     k行的两个矩阵
%     对应同样的第n行，存放着第n类的所有元素
%     record: 记录着每一行的有效元素的个数
    j = 1;
    % 下面是预分配一些空间
    % seedX 和 seedY 中存放着所有种子
    seedX = zeros(1,k);
    seedY = zeros(1,k);
    oldSeedX = zeros(1,k);
    oldSeedY = zeros(1,k);
    resX = zeros(k,length(x));
    resY = zeros(k,length(x));
    % 用来记录resX中每一行有效元素的个数
    record = zeros(1,k); 
    for i = 1:k % 产生k个随机种子, 注意： 随机种子是来自元素集合
        seedX(i) = x(round(rand()*length(resX)));
        seedY(i) = y(round(rand()*length(resX)));
        % 为保证种子不重叠
        if (i > 1 && seedX(i) == seedX(i-1) && seedY(i) == seedY(i-1))
            i = i -1; % 重新产生一个种子
        end
    end
    seedX
    seedY
    while 1
        disp(['jack is here'])
        record(:) = 0; % 重置为零
        resX(:) = 0;
        resY(:) = 0;
        for i = 1:length(x) % 对所有元素遍历
            % 下面是判断本次元素应该归为哪一类，这里我们是根据欧几里得距离进行类别判定
            % k-mean算法认为元素应该归为距离最近的种子代表的类
            distanceMin = 1;
            for j = 2:k
                if (power(x(i)-seedX(distanceMin),2)+power(y(i)-seedY(distanceMin),2))... 
                    > (power(x(i)-seedX(j),2) + power(y(i)-seedY(j),2))
                    distanceMin = j;
                end
            end
            % 将本次元素点进行类别归并
            resX(distanceMin,record(distanceMin)+1) = x(i);
            resY(distanceMin,record(distanceMin)+1) = y(i);
            record(distanceMin) = record(distanceMin) + 1;
        end
        oldSeedX = seedX;
        oldSeedY = seedY;
        % 移动种子至其类中心
        record
        for i = 1:k
            if record(i) == 0
                continue;
            end
            seedX(i) = sum(resX(i,:))/record(i);
            seedY(i) = sum(resY(i,:))/record(i);
        end

        % 如果本次得到的种子和上次的种子一致，则认为分类完毕。

        if mean([seedX == oldSeedX seedY == oldSeedY]) == 1 % 这句话所想表达的意思就是 if seedX == oldSeedX && seedY == oldSeedY
            break;
        end
    end
    % 下面代码只是对resX,resY所占用的内寸大小进行简单的优化
    maxPos = max(record);
    resX = resX(:,1:maxPos);
    resY = resY(:,1:maxPos);
end



% 最大匹配算法
%n、m表示两边各节点数，A表示二分图一边到另一边的弧01矩阵（多余节点补零）
function [M]=ZDPP(m,n,A)
M(m,n)=0; 
for(i=1:m)for(j=1:n)if(A(i,j)) M(i,j)=1;break;end;end %求初始匹配M
  if(M(i,j)) break;end;end  %获得仅含一条边的初始匹配M
while(1)
  for(i=1:m) x(i)=0;end  %将记录X中点的标号和标记*
  for(i=1:n) y(i)=0;end  %将记录Y中点的标号和标记*
  for(i=1:m) pd=1;     %寻找X中 M的所有非饱和点
    for(j=1:n)if(M(i,j)) pd=0;end;end
    if(pd)x(i)=-n-1;end;end  %将X中 M的所有非饱和点都给以标号0 和标记*, 程序中用n+1 表示0标号, 标号为负数时表示标记*
  pd=0;
  while(1)xi=0;
    for(i=1:m)if(x(i)<0)xi=i;break;end;end    %假如 X 中存在一个既有标号又有标记*的点, 则任取X中一个既有标号又有标记*的点 xi
    if(xi==0)pd=1;break;end  %假如X中所有有标号的点都已去掉了标记*, 算法终止
    x(xi)=x(xi)*(-1); %去掉xi的标记*
    k=1;
    for(j=1:n)if(A(xi,j)&y(j)==0)y(j)=xi;yy(k)=j;k=k+1;end;end  %对与 xi 邻接且尚未给标号的 yj 都给以标号i
    if(k>1)k=k-1;
      for(j=1:k)pdd=1; 
        for(i=1:m) if(M(i,yy(j)))x(i)=-yy(j);pdd=0;break;end;end  %将yj在M中与之邻接的点xk (即 xkyj∈M), 给以标号j 和标记*
        if(pdd)break;end;end
      if(pdd)k=1;j=yy(j);   %yj 不是M的饱和点
        while(1)P(k,2)=j;P(k,1)=y(j);j=abs(x(y(j)));   %任取M的一个非饱和点 yj, 逆向返回
          if(j==n+1)break;end  %找到X中标号为0 的点时结束, 获得 M-增广路P
          k=k+1;end
        for(i=1:k)if(M(P(i,1),P(i,2)))M(P(i,1),P(i,2))=0;  %将匹配 M 在增广路 P 中出现的边去掉
          else M(P(i,1),P(i,2))=1;end;end %将增广路P中没有在匹配 M中出现的边加入到匹配M中
        break;end;end;end
  if(pd)break;end;end  %假如X中所有有标号的点都已去掉了标记*, 算法终止
M  %显示最大匹配M, 程序结束

% 时间序列模型
y = []; %已知序列
m = length(y);
n = [x1,x2,..,xn] %移动的平均项数
for i = 1:length(y)
    for j = 1:m-n(i)+1
        yhat{i}(j) = sum(y(j:j+n(i)-1))/n(i);
    end
    yd(i) = yhat{i}(end); %预测目标yd
    s(i) = sqrt((y(n(i)+1:m)-yhat{i}(1:end-1).^2));
end
yd,s

% 灰色预测
clc,clear;  
syms a b;  
c=[a b]';  
A=[89677,99215,109655,120333,135823,159878,182321,209407,246619,300670];  
B=cumsum(A);  %原始数据累加  
n=length(A);  
for i=1:(n-1)  
    C(i)=(B(i)+B(i+1))/2; %生成累加矩阵  
end  
%计算待定参数的值  
D=A;D(1)=[];  
D=D';  
E=[-C;ones(1,n-1)];  
c=inv(E*E')*E*D;  
c=c';  
a=c(1);b=c(2);  
%预测后续数据  
F=[];F(1)=A(1);  
for i=2:(n+10)  %只推测后10个数据，可以从此修改  
    F(i)=(A(1)-b/a)/exp(a*(i-1))+b/a;  
end  
G=[];G(1)=A(1);  
for i=2:(n+10)  %只推测后10个数据，可以从此修改  
    G(i)=F(i)-F(i-1);  %得到预测出来的数据  
end  
t1=1999:2008;  
t2=1999:2018;  %多10组数据  
G  
h=plot(t1,A,'o',t2,G,'-'); %原始数据与预测数据的比较  
set(h,'LineWidth',1.5);

% 蚁群算法
%初始化蚁群
m=31;%蚁群中蚂蚁的数量，当m接近或等于城市个数n时，本算法可以在最少的迭代次数内找到最优解
C=[1304 2312;3639 1315;4177 2244;3712 1399;3488 1535;3326 1556;3238 1229;4196 1004;
   4312 790;4386 570;3007 1970;2562 1756;2788 1491;2381 1676;1332 695;3715 1678;
   3918 2179;4061 2370;3780 2212;3676 2578;4029 2838;4263 2931;3429 1908;3507 2367;
   3394 2643;3439 3201;2935 3240;3140 3550;2545 2357;2778 2826;2370 2975];%城市的坐标矩阵
Nc_max=200;%最大循环次数，即算法迭代的次数，亦即蚂蚁出动的拨数（每拨蚂蚁的数量当然都是m）
alpha=1;%蚂蚁在运动过程中所积累信息（即信息素）在蚂蚁选择路径时的相对重要程度，alpha过大时，算法迭代到一定代数后将出现停滞现象
beta=5;%启发式因子在蚂蚁选择路径时的相对重要程度
rho=0.5;%0<rho<1,表示路径上信息素的衰减系数（亦称挥发系数、蒸发系数），1-rho表示信息素的持久性系数
Q=100;%蚂蚁释放的信息素量，对本算法的性能影响不大
%变量初始化
n=size(C,1);%表示TSP问题的规模，亦即城市的数量
D=ones(n,n);%表示城市完全地图的赋权邻接矩阵，记录城市之间的距离
for i=1:n
    for j=1:n
        if i<j
            D(i,j)=sqrt((C(i,1)-C(j,1))^2+(C(i,2)-C(j,2))^2);
        end
    D(j,i)=D(i,j);
    end
end
eta=1./D;%启发式因子，这里设为城市之间距离的倒数
pheromone=ones(n,n);%信息素矩阵,这里假设任何两个城市之间路径上的初始信息素都为1
tabu_list=zeros(m,n);%禁忌表，记录蚂蚁已经走过的城市，蚂蚁在本次循环中不能再经过这些城市。当本次循环结束后，禁忌表被用来计算蚂蚁当前所建立的解决方案，即经过的路径和路径的长度
Nc=0;%循环次数计数器
routh_best=zeros(Nc_max,n);%各次循环的最短路径
length_best=ones(Nc_max,1);%各次循环最短路径的长度
length_average=ones(Nc_max,1);%各次循环所有路径的平均长度
while Nc<Nc_max
    %将m只蚂蚁放在n个城市上
    rand_position=[];
    for i=1:ceil(m/n)  %朝正无穷方向取整   蚂蚁数量/城市数量
        rand_position=[rand_position,randperm(n)];
    end
    tabu_list(:,1)=(rand_position(1:m));%将蚂蚁放在城市上之后的禁忌表，第i行表示第i只蚂蚁，第i行第一列元素表示第i只蚂蚁所在的初始城市
    %m只蚂蚁按概率函数选择下一座城市，在本次循环中完成各自的周游
    for j=2:n
        for i=1:m
            city_visited=tabu_list(i,1:(j-1));%已访问的城市
            city_remained=zeros(1,(n-j+1));%待访问的城市
            probability=city_remained;%待访问城市的访问概率
            cr=1;
            %for循环用于求待访问的城市。比如如果城市个数是5，而已访问的城市city_visited=[2 4],则经过此for循环后city_remanied=[1 3 5]
            for k=1:n
                if length(find(city_visited==k))==0
                    city_remained(cr)=k;
                    cr=cr+1;
                end
            end
            %for循环计算待访问城市的访问概率分布，此概率和两个参数有关，一是蚂蚁当前所在城市（即city_visited(end))和待访问城市（即city_remained（k))路径上的信息素，一是这两者之间的启发因子即距离的倒数            
            for k=1:length(city_remained)
                probability(k)=(pheromone(city_visited(end),city_remained(k)))^alpha*(eta(city_visited(end),city_remained(k)))^beta;
            end
            probability=probability/sum(probability);
            %按概率选取下一个要访问的城市
            pcum=cumsum(probability);%返回各列的累加值
            select=find(pcum>=rand);
            to_visit=city_remained(select(1));
            tabu_list(i,j)=to_visit;
        end
    end
    if Nc>0
        tabu_list(1,:)=routh_best(Nc,:);%将上一代的最优路径（最优解）保留下来，保证上一代中的最适应个体的信息不会丢失
    end
    %记录本次循环的最佳路线
    total_length=zeros(m,1);%m只蚂蚁在本次循环中分别所走过的路径长度
    for i=1:m
        r=tabu_list(i,:);%取出第i只蚂蚁在本次循环中所走的路径
        for j=1:(n-1)
            total_length(i)=total_length(i)+D(r(j),r(j+1));%第i只蚂蚁本次循环中从起点城市到终点城市所走过的路径长度
        end
        total_length(i)=total_length(i)+D(r(1),r(n));%最终得到第i只蚂蚁在本次循环中所走过的路径长度
    end
    length_best(Nc+1)=min(total_length);%把m只蚂蚁在本次循环中所走路径长度的最小值作为本次循环中最短路径的长度
    position=find(total_length==length_best(Nc+1));%找到最短路径的位置，即最短路径是第几只蚂蚁或哪几只蚂蚁走出来的
    routh_best(Nc+1,:)=tabu_list(position(1),:);%把第一个走出最短路径的蚂蚁在本次循环中所走的路径作为本次循环中的最优路径
    length_average(Nc+1)=mean(total_length);%计算本次循环中m只蚂蚁所走路径的平均长度
    Nc=Nc+1
    %更新信息素
    delta_pheromone=zeros(n,n);
    for i=1:m
        for j=1:(n-1)
            delta_pheromone(tabu_list(i,j),tabu_list(i,j+1))=delta_pheromone(tabu_list(i,j),tabu_list(i,j+1))+Q/total_length(i);%total_length(i)为第i只蚂蚁在本次循环中所走过的路径长度（蚁周系统区别于蚁密系统和蚁量系统的地方）
        end
        delta_pheromone(tabu_list(i,n),tabu_list(i,1))=delta_pheromone(tabu_list(i,n),tabu_list(i,1))+Q/total_length(i);%至此把第i只蚂蚁在本次循环中在所有路径上释放的信息素已经累加上去
    end%至此把m只蚂蚁在本次循环中在所有路径上释放的信息素已经累加上去
    pheromone=(1-rho).*pheromone+delta_pheromone;%本次循环后所有路径上的信息素
    %禁忌表清零，准备下一次循环，蚂蚁在下一次循环中又可以自由地进行选择
    tabu_list=zeros(m,n);
end
%输出结果，绘制图形
position=find(length_best==min(length_best));
shortest_path=routh_best(position(1),:)
shortest_length=length_best(position(1))
%绘制最短路径
figure(1)
set(gcf,'Name','Ant Colony Optimization——Figure of shortest_path','Color','r')
N=length(shortest_path);
scatter(C(:,1),C(:,2),50,'filled');
hold on
plot([C(shortest_path(1),1),C(shortest_path(N),1)],[C(shortest_path(1),2),C(shortest_path(N),2)])
set(gca,'Color','g')
hold on
for i=2:N
    plot([C(shortest_path(i-1),1),C(shortest_path(i),1)],[C(shortest_path(i-1),2),C(shortest_path(i),2)])
    hold on
end
%绘制每次循环最短路径长度和平均路径长度
figure(2)
set(gcf,'Name','Ant Colony Optimization——Figure of length_best and length_average','Color','r')
plot(length_best,'r')
set(gca,'Color','g')
hold on
plot(length_average,'k')

% logistics人口增长模型
%数据格式
format long
%前20组数据
X0=xlsread('D:\MATLAB\11Logistic.xls','E4:G23');
%全部25组数据：验证和回归
XE=xlsread('D:\MATLAB\11Logistic.xls','E4:G28');
%前20组评估的数据值：P
Y0=xlsread('D:\MATLAB\11Logistic.xls','H4:H23');
n=size(Y0,1);
%π和P的映射关系
for i=1:n
    if Y0(i)==0
        Y1(i,1)=0.25;
    else
        Y1(i,1)=0.75;
    end
end
%构建常系数
X1=ones(size(X0,1),1);
X=[X1,X0];
Y=log(Y1./(1-Y1));
b=regress(Y,X);
%模型验证的应用
for i=1:size(XE,1)
pai0=exp(b(1)+b(2)*XE(i,1)+b(3)*XE(i,2)+b(4)*XE(i,3))/(1+exp(b(1)+b(2)*XE(i,1)+b(3)*XE(i,2)+b(4)*XE(i,3)));
    if(pai0<=0.5)
        P(i)=0;
    else
        P(i)=1;
    end
end
%回归结果
disp(['回归系数：' num2str(b') '  ']);
disp(['评估结果：' num2str(P)  '   ']);

% 训练神经网络
P=[3.2 3.2 3 3.2 3.2 3.4 3.2 3 3.2 3.2 3.2 3.9 3.1 3.2;
9.6 10.3 9 10.3 10.1 10 9.6 9 9.6 9.2 9.5 9 9.5 9.7;
3.45 3.75 3.5 3.65 3.5 3.4 3.55 3.5 3.55 3.5 3.4 3.1 3.6 3.45;
2.15 2.2 2.2 2.2 2 2.15 2.14 2.1 2.1 2.1 2.15 2 2.1 2.15;
140 120 140 150 80 130 130 100 130 140 115 80 90 130;
2.8 3.4 3.5 2.8 1.5 3.2 3.5 1.8 3.5 2.5 2.8 2.2 2.7 4.6;
11 10.9 11.4 10.8 11.3 11.5 11.8 11.3 11.8 11 11.9 13 11.1 10.85;
50 70 50 80 50 60 65 40 65 50 50 50 70 70];
T=[2.24 2.33 2.24 2.32 2.2 2.27 2.2 2.26 2.2 2.24 2.24 2.2 2.2 2.35];
[p1,minp,maxp,t1,mint,maxt]=premnmx(P,T);
%创建网络
net=newff(minmax(P),[8,6,1],{'tansig','tansig','purelin'},'trainlm');
%设置训练次数
net.trainParam.epochs = 5000;
%设置收敛误差
net.trainParam.goal=0.0000001;
%训练网络
[net,tr]=train(net,p1,t1);
TRAINLM, Epoch 0/5000, MSE 0.533351/1e-007, Gradient 18.9079/1e-010
TRAINLM, Epoch 24/5000, MSE 8.81926e-008/1e-007, Gradient 0.0022922/1e-010
TRAINLM, Performance goal met.
%输入数据
a=[3.0;9.3;3.3;2.05;100;2.8;11.2;50];
%将输入数据归一化
a=premnmx(a);
%放入到网络输出数据
b=sim(net,a);
%将得到的数据反归一化得到预测数据
c=postmnmx(b,mint,maxt);
c

% 遗传算法
%1. 打开 Optimization 工具，在 Solver 中选择 ga - genetic algorithm，在 Fitness function 中填入 @target
%2. 在你的工程文件夹中新建 target.m，注意MATLAB的当前路径是你的工程文件夹所在路径
%3. 在 target.m 中写下适应度函数，比如
    function [ y ] = target(x)
    y = -x-10*sin(5*x)-7*cos(4*x);
    end
%*MATLAB中的GA只求解函数的(近似)最小值，所以先要将目标函数取反。
%4. 打开 Optimization 工具，输入 变量个数(Number of variables) 和 自变量定义域(Bounds) 的值
%点击 Start，遗传算法就跑起来了
%最终在输出框中可以看到函数的(近似)最小值，和达到这一程度的迭代次数(Current iteration)和最终自变量的值(Final point)
%5. 在 Optimization - ga 工具中，有许多选项。通过这些选项，可以设置下列属性种群(Population)
%选择(Selection)交叉(Crossover)变异(Mutation)停止条件(Stopping criteria)画图函数(Plot functions)

% 粒子群算法
% 初始化种群  
f= @(x)x .* sin(x) .* cos(2 * x) - 2 * x .* sin(3 * x); % 函数表达式  
figure(1);ezplot(f,[0,0.01,20]);  
N = 50;                         % 初始种群个数  
d = 1;                          % 空间维数  
ger = 100;                      % 最大迭代次数       
limit = [0, 20];                % 设置位置参数限制  
vlimit = [-1, 1];               % 设置速度限制  
w = 0.8;                        % 惯性权重  
c1 = 0.5;                       % 自我学习因子  
c2 = 0.5;                       % 群体学习因子   
for i = 1:d  
    x = limit(i, 1) + (limit(i, 2) - limit(i, 1)) * rand(N, d);%初始种群的位置  
end  
v = rand(N, d);                  % 初始种群的速度  
xm = x;                          % 每个个体的历史最佳位置  
ym = zeros(1, d);                % 种群的历史最佳位置  
fxm = zeros(N, 1);               % 每个个体的历史最佳适应度  
fym = -inf;                      % 种群历史最佳适应度  
hold on  
plot(xm, f(xm), 'ro');title('初始状态图');  
figure(2)  
%% 群体更新  
iter = 1;  
record = zeros(ger, 1);          % 记录器  
while iter <= ger  
     fx = f(x) ; % 个体当前适应度     
     for i = 1:N        
        if fxm(i) < fx(i)  
            fxm(i) = fx(i);     % 更新个体历史最佳适应度  
            xm(i,:) = x(i,:);   % 更新个体历史最佳位置  
        end   
     end  
if fym < max(fxm)  
        [fym, nmax] = max(fxm);   % 更新群体历史最佳适应度  
        ym = xm(nmax, :);      % 更新群体历史最佳位置  
 end  
    v = v * w + c1 * rand * (xm - x) + c2 * rand * (repmat(ym, N, 1) - x);% 速度更新  
    % 边界速度处理  
    v(v > vlimit(2)) = vlimit(2);  
    v(v < vlimit(1)) = vlimit(1);  
    x = x + v;% 位置更新  
    % 边界位置处理  
    x(x > limit(2)) = limit(2);  
    x(x < limit(1)) = limit(1);  
    record(iter) = fym;%最大值记录  
%     x0 = 0 : 0.01 : 20;  
%     plot(x0, f(x0), 'b-', x, f(x), 'ro');title('状态位置变化')  
%     pause(0.1)  
    iter = iter+1;  
end  
figure(3);plot(record);title('收敛过程')  
x0 = 0 : 0.01 : 20;  
figure(4);plot(x0, f(x0), 'b-', x, f(x), 'ro');title('最终状态位置')  
disp(['最大值：',num2str(fym)]);  
disp(['变量取值：',num2str(ym)]);  




